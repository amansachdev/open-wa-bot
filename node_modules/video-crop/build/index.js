'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _fluentFfmpeg = require('fluent-ffmpeg');

var _fluentFfmpeg2 = _interopRequireDefault(_fluentFfmpeg);

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _VideoCropError = require('./errors/VideoCropError');

var _VideoCropError2 = _interopRequireDefault(_VideoCropError);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var defaultOptions = {
  input: '',
  output: _os2.default.homedir() + '/out.mp4',
  x: [0],
  y: [0],
  height: [0],
  width: [0],
  fps: null
};

function buildCropString(width, height, x, y) {
  return width + ':' + height + ':' + x + ':' + y;
}

function stringToArray(val) {
  if (Array.isArray(val)) {
    return val;
  }

  return [val];
}

/**
 *
 * @param width
 * @param height
 * @param x
 * @param y
 * @returns {{filter: string, options: string}}
 */
function buildCropObject(width, height, x, y) {
  return {
    filter: 'crop',
    options: buildCropString(width, height, x, y)
  };
}

var VideoCrop = function () {
  function VideoCrop(options) {
    _classCallCheck(this, VideoCrop);

    var o = options || {};
    this.opts = _extends({}, defaultOptions, o);

    this.opts.x = stringToArray(this.opts.x);
    this.opts.y = stringToArray(this.opts.y);
    this.opts.height = stringToArray(this.opts.height);
    this.opts.width = stringToArray(this.opts.width);

    if (this.opts.x.length !== this.opts.y.length && this.opts.width.length !== this.opts.height.length) {
      throw new _VideoCropError2.default('x, y, width and height must be arrays of equal length');
    }
  }

  _createClass(VideoCrop, [{
    key: 'getOptions',
    value: function getOptions() {
      return this.opts;
    }
  }, {
    key: 'buildFilterArray',
    value: function buildFilterArray() {
      var result = [];

      for (var i = 0; i < this.opts.x.length; i += 1) {
        result.push(buildCropObject(this.opts.width[i], this.opts.height[i], this.opts.x[i], this.opts.y[i]));
      }

      return result;
    }
  }, {
    key: 'getOutputFilename',
    value: function getOutputFilename(i) {
      if (this.opts.x.length === 1) {
        return this.opts.output;
      }

      var tmp = this.opts.output.split('.');
      tmp[tmp.length - 2] = '' + tmp[tmp.length - 2] + i;
      return tmp.join('.');
    }
  }, {
    key: 'run',
    value: function run() {
      var _this = this;

      var promises = [];

      var _loop = function _loop(i) {
        promises.push(new Promise(function (resolve) {
          var command = new _fluentFfmpeg2.default({
            source: _this.opts.input
          });

          command.on('end', function () {
            resolve();
          });

          if (_this.opts.fps !== null) {
            command.fps(_this.opts.fps);
          }

          command.complexFilter([buildCropObject(_this.opts.width[i], _this.opts.height[i], _this.opts.x[i], _this.opts.y[i])]);

          command.output(_this.getOutputFilename(i + 1));
          command.run();
        }));
      };

      for (var i = 0; i < this.opts.x.length; i += 1) {
        _loop(i);
      }

      return Promise.all(promises);
    }
  }]);

  return VideoCrop;
}();

exports.default = VideoCrop;